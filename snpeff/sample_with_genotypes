#!/usr/bin/env python
# Get the samples that have a certain variant either 0/1, 0/0 or 1/1 for now
# A VERY HACKY REALITY THIS SCRIPT IS

import argparse

def parse_samples(samples_file):
    """ Returns the samples, needs to be the exact same
        VCF file that we were using in R.
    """
    samples = []
    with open(samples_file) as f:
        [samples.append(line.strip()) for line in f if "#" not in line]
    return samples 

def groups_and_names(samples,gts):
    """ REMOVE MISSING FOR THE MOMENT"""
    groups = {}
    for sample, gt in zip(samples, gts):
        if(gt == -1):
            continue
        try:
            groups[gt].append(sample)
        except KeyError:
            groups[gt] = [sample]
    return groups


def get_samp_names(gt,samples,i):
    if(gt == '0/0'):
        gt = 0 
    elif(gt == '0/1'):
        gt = 1
    elif(gt == '1/1'):
        gt = 2
    else:
        gt=-1
    return (samples[i],gt)

def get_first_five(line):
    return '\t'.join(line.strip().split('\t')[:5])


def get_samples_with_genotypes(vcf_input,samples):
    """ Currently only works for 012 
        could easily be used on other kinds of snps

    """
    print("#sample_with_genotypes\t" + vcf_input)
    print("Chrom\tPos\tID\tRef\tAlt\tHet_IDS\tHom_IDS")
    with open(vcf_input) as f:
        for line in f:
            if ("#" in line):
                continue
            else:
                start = get_first_five(line)
                line=line.strip().split('\t')[9:]
                tuple_mayhem = [get_samp_names(s.split(":")[0],samples,i) for i, s in enumerate(line)]
                samples = [s[0] for s in tuple_mayhem]
                gts = [s[1] for s in tuple_mayhem]
                gn = groups_and_names(samples, gts)
                try:
                    gn[1]
                except KeyError:
                    gn[1] = ""
                try:
                    gn[2]
                except KeyError:
                    gn[2] = ""
                # For now just print out the homo and hetero calls, make no assumptio
                print(start+'\t'+ ','.join(gn[1]) +'\t' + ','.join(gn[2]))

def main():
    parser = argparse.ArgumentParser(description="Get the samples with the alternate alleles (high) and/or low coverage")
    parser.add_argument('-s',dest='sample_file',help='Sample file generated by this pipeline')
    parser.add_argument("vcf_input",help='VCF input file')
    args = parser.parse_args()
    assert args.sample_file is not None, \
            "Sample file -s need to have an argument"
    samples = parse_samples(args.sample_file)
    get_samples_with_genotypes(args.vcf_input, samples)

if __name__=="__main__":
    main()
